-> Must try Commands for: 
- unmet dependencies
- broken packages

> sudo apt-get update
> sudo apt update -y && sudo apt upgrade -y
> sudo apt-get full-upgrade -y
> sudo apt-get install -f
> sudo apt --fix-missing update
> sudo apt update --fix-missing 
> sudo apt --fix-missing install
> sudo apt-get dist-upgrade
> sudo apt-get clean && sudo apt-get update && sudo apt-get dist-upgrade



--> Force Reconfigure or Remove Broken Packages with DPKG:  <--

1. Reconfigure DPKG, the base package management system.
> sudo dpkg --configure -a

2. Check if DPKG marked some packages as needing a reinstall.
> sudo dpkg -l | grep ^..R

3. If the command above returns a list of one or more packages, try removing the packages.
> sudo dpkg --purge --force-all [package-name]

4. After you finish troubleshooting, run the following command to clean up the system.
> sudo apt clean

5. Then update the repositories.
> sudo apt udpate



-> Resolve DPKG Lock Issue:  <-

1. To fix the problem, remove the lock file manually.
> sudo rm /var/lib/apt/lists/lock

2. Also, remove the lock in cache.
> sudo rm /var/cache/apt/archives/lock

Deleting the lock enables you to use APT and DPKG again.




--> apt update && apt upgrade errors in linux <--

> sudo rm -rvf /var/lib/apt/lists/*




-->  Warning: apt-key is deprecated. Manage key-ring files in trusted.gpg.d instead (see apt-key(8))  <--

- apt-keys are stored in /etc/apt/trusted.gpg.d

THEORY :

Installing a package from an external repository in Ubuntu consists of three steps:
   - Adding the repository’s GPG key to the system
   - Adding the external repository to the system
   - Installing the package from this external repository
   
- ‘apt-key being deprecated’ warning is when you try installing packages from third-party repositories.
- It’s a warning, not an error. It doesn’t stop the process. The GPG key is added to your system and you can continue adding the external repository.

-> Understanding the apt-key deprecation and trusted.gpg issue

   There are two parts to this message:
   	- apt-key is deprecated
   	- Manage keyring files in trusted.gpg.d

   When you add the keys (.gpg or .asc) of a repository, your system trusts the packages (signed with that key) coming from the repository. If you 
   don’t add the key of a repository, your system won’t allow installing packages from it.

-> Problem with the way apt-key works

   It works by adding the keys to the /etc/apt/trusted.gpg file. The apt package manager trusts the keys inside this file.

-> Ubuntu/Debian Linux wants you to separate GPG keys
   
   Ubuntu doesn’t want you to add all the signature keys in the single /etc/apt/trusted.gpg file. It suggests using a separate file that are located in 
   the /etc/apt/trusted.gpg.d directory.

SOLUTION:

1. This means that instead of using the apt-key in this fashion:
> curl -sS https://download.spotify.com/debian/pubkey_5E3C45D7B312C643.gpg | sudo apt-key add -

You should use it like this:
> curl -sS https://download.spotify.com/debian/pubkey_5E3C45D7B312C643.gpg | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/spotify.gpg

Which is basically adding the key to its dedicated file under /etc/apt/trusted.d directory. Ubuntu won’t complain anymore.
























